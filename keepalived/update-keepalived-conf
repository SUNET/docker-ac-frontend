#!/bin/bash

STATE="SLAVE"
while getopts "l:r:v:p:h:m" arg; do
   case $arg in
      l) LB1=$OPTARG ;;
      r) LB2=$OPTARG ;;
      v) VIRTUALIP=$OPTARG ;;
      h) SP_HOSTNAME=$OPTARG ;; 
      m) STATE="MASTER" ;;
      p) AUTHPASS=$OPTARG ;;
   esac
done


HTTPS_LB1_HASH=`genhash -V ${SP_HOSTNAME} -S -s ${LB1} -p 443 -u /_lvs.txt | awk '{print $NF}'`
HTTP_LB1_HASH=`genhash -V ${SP_HOSTNAME} -s ${LB1} -p 80 -u /_lvs.txt | awk '{print $NF}'`
HTTPS_LB2_HASH=`genhash -V ${SP_HOSTNAME} -S -s ${LB2} -p 443 -u /_lvs.txt | awk '{print $NF}'`
HTTP_LB2_HASH=`genhash -V ${SP_HOSTNAME} -s ${LB2} -p 80 -u /_lvs.txt | awk '{print $NF}'`

ROUTERID=`echo $VIRTUALIP | awk -F. '{print $NF}'`

SP_CONTACT="noc@nordu.net"
SMTP_SERVER="smtp.nordu.net"

PRIO="50"
if [ "x${STATE}" = "xMASTER" ]; then
   PRIO="100"
fi

cat>/etc/keepalived/keepalived.conf<<EOF
# Global Configuration
global_defs {
  smtp_server ${SMTP_SERVER}
  smtp_connect_timeout 30
  router_id ${SP_HOSTNAME}
}

# describe virtual service ip
vrrp_instance VI_1 {
  # initial state
  state ${STATE}
  interface eth0
  virtual_router_id ${ROUTERID}
  priority ${PRIO}
  advert_int 1
  smtp_alert
  authentication {
    auth_type PASS
    auth_pass ${AUTHPASS}
  }
  virtual_ipaddress {
    ${VIRTUALIP}/32
  }
  notify_master "/etc/keepalived/bypass_ipvs.sh del ${VIRTUALIP}"
  notify_backup "/etc/keepalived/bypass_ipvs.sh add ${VIRTUALIP}"
  notify_fault "/etc/keepalived/bypass_ipvs.sh add ${VIRTUALIP}"
}

virtual_server ${VIRTUALIP} 443 {
  delay_loop 30
  lb_algo rr
  lb_kind DR
  persistence_timeout 50
  protocol TCP
  virtualhost ${SP_HOSTNAME}

  real_server ${LB1} 443 {
    SSL_GET {
      url {
        path /_lvs.txt
        digest ${HTTPS_LB1_HASH}
      }
      connect_timeout 10
      nb_get_retry 3
      delay_before_retry 2
    }
  }
  real_server ${LB2} 443 {
    SSL_GET {
      url {
        path /_lvs.txt
        digest ${HTTPS_LB2_HASH}
      }
      connect_timeout 10
      nb_get_retry 3
      delay_before_retry 2
    }
  }
}

virtual_server ${VIRTUALIP} 80 {
  delay_loop 30
  lb_algo rr
  lb_kind DR
  persistence_timeout 50
  protocol TCP
  virtualhost ${SP_HOSTNAME}

  real_server ${LB1} 80 {
    HTTP_GET {
      url {
        path /_lvs.txt
        digest ${HTTP_LB1_HASH}
      }
      connect_timeout 3
      nb_get_retry 3
      delay_before_retry 2
    }
  }
  real_server ${LB2} 80 {
    HTTP_GET {
      url {
        path /_lvs.txt
        digest ${HTTP_LB2_HASH}
      }
      connect_timeout 3
      nb_get_retry 3
      delay_before_retry 2
    }
  }
}
EOF
